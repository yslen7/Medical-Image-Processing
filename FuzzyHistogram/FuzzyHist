#Importación de librerías a usar
import numpy as np
import matplotlib.pyplot as plt
import skfuzzy as fuzzy

from skimage import data, color, io

plt.close('all')

#Leemos nuestra imagen
gris= np.uint8(color.rgb2gray(io.imread('loro.jpg'))*255)
#Obtenemos el tamaño de la imagen
[filas, columnas]=gris.shape

#Creación Histograma
histograma = np.zeros(256)
for i in range(filas):
    for j in range(columnas):
        pos = gris[i,j]
        histograma[pos]=histograma[pos] + 1
        
#Muestreo de histograma e imagen original        
fig=plt.figure(1)
ax1 = fig.add_subplot(121)
ax2 = fig.add_subplot(122)
ax1.plot(histograma)
ax1.set_title('Histograma imagen original')
ax2.imshow(gris, cmap="gray")
ax2.set_title('Imagen original')
plt.show()
plt.draw()
#Colocamos una pausa de 5 segundos para observar el histograma
#y decidir qué valor aproximado queremos para la salida
plt.pause(5)

#FUZZYFICATION. Conjuntos difusos
pixel=np.linspace(0, 255, 256)
#-Para los pixeles oscuros se usará un conjunto difuso tipo Z
#-Se tendrá un intervalo de bajada de 25 a 130
oscuros = fuzzy.zmf(pixel, 25, 130)
#-Para los pixeles claros se usará un conjunto difuso tipo S
#-Se tendrá un intervalo de bajada de 130 a 230
claros = fuzzy.smf(pixel, 130, 230)
#-Para los pixeles grises se usará un conjunto difuso tipo campana (bell)
#-El ancho será de 55, la suavidad de pendiente de caída de 3 y el centro
# de la campana estará localizado en 128
grises = fuzzy.gbellmf(pixel, 55,3,128)

#Singletons
#Se seleccionará el valor aproximado que se desea para cada conjunto
s1=int(input("Ingrese el valor aproximado para la salida de los oscuros: "))
s2=int(input("Ingrese el valor aproximado para la salida de los grises: "))
s3=int(input("Ingrese el valor aproximado para la salida de los claros: "))

#DEFUZZYFICATION
#Se obtiene el valor de salida para cada valor de gris
new_g=np.zeros(256)
for i in range(256):
    new_g[i]=(oscuros[i]*s1 + grises[i]*s2 + claros[i]*s3)/(oscuros[i]+grises[i]+claros[i])

#Muestreo de conjuntos difusos y la función de salida
fig2=plt.figure(2)
ax1=fig2.add_subplot(121)
ax2=fig2.add_subplot(122)
ax1.plot(oscuros, label="Oscuros")
ax1.plot(claros, label='Claros')
ax1.plot(grises, label="Grises")
ax1.set_title('Conjuntos difusos')
ax2.plot(new_g)
ax2.set_title('Salida')
ax1.legend()

#Ecualización Histograma Fuzzy
#Se obtiene el valor para cada pixel de la imagen considerando el valor new_g
ehf = np.zeros([filas,columnas])
for f in range (filas):
    for c in range (columnas):
        valor=gris[f,c]
        ehf[f,c]=new_g[valor]
ehf=np.uint8(ehf)

#Se obtiene e histograma de la nueva imagen ehf
histograma2 = np.zeros(256)
for x in range(filas):
    for y in range(columnas):
        posicion = ehf[x,y]
        histograma2[posicion]=histograma2[posicion] + 1

#Muestreo de histograma e imagen mejorada
fig3=plt.figure(3)
ax1 = fig3.add_subplot(121)
ax2 = fig3.add_subplot(122)
ax1.plot(histograma2)
ax1.set_title('Histograma imagen mejorada')
ax2.imshow(ehf, cmap="gray")
ax2.set_title('Imagen mejorada')

#Muestreo de Imagen Original vs Mejorada
fig4=plt.figure(4)
ax1 = fig4.add_subplot(121)
ax2 = fig4.add_subplot(122)
ax1.imshow(gris, cmap='gray')
ax1.set_title('Imagen Original')
ax2.imshow(ehf, cmap="gray")
ax2.set_title('Imagen Mejorada')

#Muestreo de Histograma Original vs. Mejorado
plt.figure(5)
plt.plot(histograma, label='Imagen Original')
plt.plot(histograma2, label='Imagen Mejorada')
plt.title('Histogramas')
plt.legend()

plt.show()
